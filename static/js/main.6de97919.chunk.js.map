{"version":3,"sources":["components/header.jsx","components/success.jsx","components/error.jsx","components/main.jsx","App.js","serviceWorker.js","index.js","components/alarm_clock.mp3"],"names":["Header","Fragment","className","id","href","Success","timer","last","music","hours","minutes","seconds","onClick","Error","sound","message","dis","refs","useRef","useState","state","setState","useEffect","counts","width","anime","targets","round","easing","duration","update","current","style","complete","ReactDOM","createPortal","ref","document","getElementById","Main","Howl","src","autoplay","loop","volume","Howler","intervalRef","count","intervalFunction","dispatch","type","value","custom","useReducer","action","Math","floor","start","setTimer","ui","successUI","error","status","placeholder","onChange","e","Number","target","window","clearInterval","disabled","setInterval","setTimeout","h","m","s","result","convertMiliseconds","play","stop","App","Boolean","location","hostname","match","render","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.6de97919.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return (\n        <React.Fragment>\n            <header>\n                <div className=\"container\">\n                    <div id=\"header\">\n                        <h2 className=\"title\"><a href=\"/\">Web-Timer</a></h2>\n                    </div>\n                </div>\n            </header>\n        </React.Fragment>\n    );\n}\n\nexport default Header;","import React from 'react';\r\n\r\nfunction Success({ timer, last, music }) {\r\n    music();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"success\">\r\n                <h2 className=\"success-title\">Successfully Timer Completed</h2>\r\n                <h3>{(timer.hours > 9) ? timer.hours : '0' + timer.hours}: {(timer.minutes > 9) ? timer.minutes : '0' + timer.minutes}: {(timer.seconds > 9) ? timer.seconds : '0' + timer.seconds}</h3>\r\n                <button onClick={last}>OK</button>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Success;","import React, { useState, useEffect, useRef } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport anime from 'animejs/lib/anime.es.js';\r\n\r\nfunction Error({ message, dis }) {\r\n\r\n    const refs = useRef();\r\n    const [ state, setState ] = useState(true);\r\n\r\n    useEffect(() => {\r\n        // ...\r\n        var counts = {\r\n            width: \"0%\"\r\n        }\r\n\r\n        anime({\r\n            targets: counts,\r\n            width: \"100%\",\r\n            round: 1,\r\n            easing: 'linear',\r\n            duration: 2000,\r\n            update: function() {\r\n                refs.current.style.width = counts.width;\r\n            },\r\n            complete: function() {\r\n                setState(false);\r\n                dis();\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return ReactDOM.createPortal(\r\n        <React.Fragment>\r\n            { ( state ) ? (\r\n            <div className=\"error\">\r\n                <h2>{ message }</h2>\r\n                <div ref={refs} className=\"counts\"></div>\r\n            </div>) : null }\r\n\r\n        </React.Fragment>,\r\n        document.getElementById(\"root\")\r\n    );\r\n}\r\n\r\nexport default Error;","import React, { useReducer, useEffect, useRef } from 'react';\nimport music from \"./alarm_clock.mp3\";\nimport {Howl, Howler} from 'howler';\nimport Success from './success';\nimport Error from './error';\n\nlet sound;\n\nfunction Main() {\n    const initialState = {\n        timer: {\n            hours: 0,\n            minutes: 0,\n            seconds: 0\n        },\n        start: false,\n        ui: false,\n        setTimer: {\n            hours: 0,\n            minutes: 0,\n            seconds: 0\n        },\n        successUI: false,\n        error: { status: false, message: null }\n    };\n\n\n    useEffect(() => {\n        sound = new Howl({\n            src: [music],\n            autoplay: false,\n            loop: true,\n            volume: 0.5\n          });\n\n        // Change global volume.\n        Howler.volume(1);\n    }, []);\n\n    const startMusic = () => {\n        sound.play();\n    }\n\n    const stopMusic = () => {\n        sound.stop();\n    }\n\n    const intervalRef = useRef();\n\n    const convertMiliseconds = ( h, m, s ) => {\n        let result = 0;\n        if ( h > 0 ) {\n            result += (h * 3600000);\n        }\n\n        if ( m > 0 ) {\n            result += (m * 60000);\n        }\n\n        if ( s > 0 ) {\n            result += (s * 1000);\n        }\n    \n        return result;\n    }\n\n    const reducer = ( state, action ) => {\n        switch ( action.type ) {\n            case 'addedInterval':\n                return { ...state, timer: { hours: Math.floor(action.value / 3600), minutes: Math.floor(action.value / 60), seconds: (state.timer.seconds + action.custom === 60) ? 0 : state.timer.seconds + action.custom } };\n            case 'setStart':\n                return { ...state, start: action.value };\n            case 'changeSetHours':\n                return { ...state, setTimer: { ...state.setTimer, hours: action.value } };\n            case 'changeSetMinutes':\n                return { ...state, setTimer: { ...state.setTimer, minutes: action.value } };\n            case 'changeSetSeconds':\n                return { ...state, setTimer: { ...state.setTimer, seconds: action.value } };\n            case 'changeTotallyTimer':\n                return { ...state, timer: { hours: 0, minutes: 0, seconds: 0 } };\n            case 'changeTotallyDefaultTimer':\n                return { ...state, setTimer: { hours: 0, minutes: 0, seconds: 0 } };\n            case 'changeUI':\n                return { ...state, ui: action.value };\n            case 'setDefaultTimer':\n                return { ...state, timer: { hours: 0, minutes: 0, seconds: 0 } };\n            case 'successUI':\n                return { ...state, successUI: action.value };\n            case 'successAll':\n                return { ...state, successUI: false, ui: false };\n            case 'setError':\n                return { ...state, error: { status: action.status, message: action.message } };\n            case 'defaultError':\n                return { ...state, error: { status: false, message: null } };\n            default:\n                throw new Error(\"This is a Default Error\");\n        }\n    }\n\n    const count = { count: 0 };\n\n\n    const intervalFunction = () => {\n        count.count = count.count + 1;\n        dispatch({ type: 'addedInterval', value: count.count, custom: 1 });\n    }\n\n    const [ state, dispatch ] = useReducer(reducer, initialState);\n\n    const editButton = () => {\n        if ( !state.start ) {\n            if ( state.ui ) {\n                dispatch({ type: 'changeUI', value: !state.ui });\n            } else {\n                dispatch({ type: 'setError', status: true, message: \"Timer isn't started\" });\n                // throw new Error(\"Timer isn't started\");\n            } \n        } else {\n            dispatch({ type: 'setError', status: true, message: \"Timer haven't stopped\" });\n        }// throw new Error(\"Running Timer first stopped it then try\");\n    }\n\n    const start = () => {\n        intervalRef.current = window.setInterval(intervalFunction, 1000);\n\n        window.setTimeout(() => {\n            window.clearInterval(intervalRef.current);\n            dispatch({ type: 'changeSetHours' });\n            dispatch({ type: 'successUI', value:true });\n        }, convertMiliseconds(state.setTimer.hours, state.setTimer.minutes, state.setTimer.seconds));\n        dispatch({ type: 'setStart', value: !state.start });\n    }\n\n    const end = () => {\n        window.clearInterval(intervalRef.current);\n        dispatch({ type: 'changeTotallyTimer' });\n        dispatch({ type: 'changeTotallyDefaultTimer' });\n        dispatch({ type: 'setStart', value: false });\n        dispatch({ type: 'successUI', value:true });\n    }\n\n    const hourChanged = e => {\n        if ( Number(e.target.value) || Number(e.target.value) === 0 ) {\n            // console.log(Number(e.target.value));\n            if ( Number(e.target.value) >= 0 && Number(e.target.value) <= 12 ) {\n                dispatch({ type: 'changeSetHours', value: Number(e.target.value) });\n            } else {\n                throw new Error(\"Hours is Invalid\");\n            }\n\n        } else throw new Error(\"Typeof is String\");\n    }\n\n    const minutesChanged = e => {\n        if ( Number(e.target.value) || Number(e.target.value) === 0 ) {\n            if ( Number(e.target.value) >= 0 && Number(e.target.value) <= 60 ) {\n                dispatch({ type: 'changeSetMinutes', value: Number(e.target.value) });\n            } else throw new Error(\"Minutes invalid\");\n            \n        } else throw new Error(\"Typeof is String\");\n    }\n\n    const secondChanged = e => {\n        if ( Number(e.target.value) || Number(e.target.value) === 0 ) {\n            if ( Number(e.target.value) >= 0 && Number(e.target.value) <= 60 ) {\n                dispatch({ type: 'changeSetSeconds', value: Number(e.target.value) });\n            } else throw new Error(\"Seconds Invalid\");\n\n        } else throw new Error(\"Typeof is String\");\n    }\n\n    const setStarted = () => {\n        dispatch({ type: 'changeUI', value: !state.ui });\n        dispatch({ type: 'setDefaultTimer' });\n        start();\n    }\n\n    const last = () => {\n        stopMusic();\n        dispatch({ type: 'successAll' });\n    }\n\n    const setDisableAnimation = () => {\n        dispatch({ type: \"defaultError\" });\n    }\n\n\n\n    return (\n        <React.Fragment>\n            <main className=\"main\">\n                <div className=\"main-top\">\n                    <small onClick={editButton}>Edit</small>\n                    { (state.ui) ? ( <h2 className=\"timer\">{(state.timer.hours > 9) ? state.timer.hours : '0' + state.timer.hours}: {(state.timer.minutes > 9) ? state.timer.minutes : '0' + state.timer.minutes}: {(state.timer.seconds > 9) ? state.timer.seconds : '0' + state.timer.seconds}</h2> ) : (\n                    <div className=\"input-items\">\n                        <form>\n                            <input type=\"text\" placeholder=\"Hours\" onChange={hourChanged} />\n                            <input type=\"text\" placeholder=\"Minutes\" onChange={minutesChanged} />\n                            <input type=\"text\" placeholder=\"Seconds\" onChange={secondChanged} />\n                        </form>\n                    </div>) }\n                    \n                </div>\n                <div className=\"main-bottom\">\n                    { (state.ui) ? (<button onClick={end} className=\"endButton\" disabled={!state.start} >End</button>) : (<button className=\"start-button\" onClick={setStarted} disabled={( state.setTimer.hours || state.setTimer.minutes || state.setTimer.seconds ) ? false : true}>Start</button>) }\n                </div>\n                { (state.successUI) ? <Success timer={state.timer} music={startMusic} last={last} /> : null }\n                { (state.error.status) ? <Error message={state.error.message} dis={setDisableAnimation} /> : null }\n            </main>\n        </React.Fragment>\n    );\n}\n\nexport default Main;","import React from 'react';\nimport Header from './components/header';\nimport Main from './components/main';\nimport \"./components/main.scss\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Header />\n      <Main />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/alarm_clock.3e74f665.mp3\";"],"sourceRoot":""}